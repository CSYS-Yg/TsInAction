/*
 * @Author: Yx_Zou 
 * @Description: '27 | 配置tsconfig.json（2）：编译选项' 
 * @Date: 2019-08-14 14:24:28 
 * @Last Modified by: Yx_Zou
 * @Last Modified time: 2019-08-14 17:55:05
 */
// 常用编译选项
{
  "compilerOptions": {
    // // 常用 1
    // "incremental": true, // 增量编译：ts 编译器在第一次编译后生成一个存储编译信息的文件，然后在二次编译时，会根据这个文件做增量的编译，提高 ts 编译速度
    // "tsBuildInfoFile": "./dist", // 增量编译文件的存储地址
    // "diagnostics": true, //编译后在终端打印出诊断信息
    // // 常用 2
    // "target": "es5", // 目标语言的版本，version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'.
    // "module": "commonjs", // 生成代码的模块标准 version：commonjs，es6，amd，umd 
    // "outFile": "./app.js" // 将多个相互依赖的文件生成一个文件，一般用于 AMD 模块
    // // 常用 3
    // "lib": [], // Ts 需要引用的库，即声明文件，若 "target": "es5" ，默认导入 "dom","es5","scriptthost" 这三个类库
    // // 常用 4
    // "allowJs": true, // 允许编译 JS 文件（.js、.jsx）。控制台输入命令 "tsc"，会项编译 TS 一样去编译 Js 的所有文件并生成文件
    // "checkJs": true, // 允许在 JS 文件中报错，通常与 allowJS 一起使用
    // "outDir": "./out", // 指定编译后生成文件的输出目录
    // "rootDir": "./" // 指定输入文件的目录（用于输出,控制输出目录结构）。默认为 "./"
    // // 常用 5
    // "declaration": true, // 编译时，会为 TS 生成一个声明文件（.js 和 .d.ts）
    // "declarationDir": "./d", // 设置生成声明文件的存放路径
    // "emitDeclarationOnly": true, // 只生成声明文件（.d.ts）
    // "sourceMap": true, // 生成目标文件的 sourceMap (.js 和 .js.map)
    // "inlineSourceMap": true, // 生成目标文件的 inline sourceMap 
    // "declarationMap": true, // 为声明文件生成 sourceMap 文件
    // "typeRoots": [], // 声明文件目录，默认 node_modules/@types
    // "types": [], // 声明文件包，如果只指定声明文件目录下的某一个包的则只会加载这个包的声明文件
    // // 常用 6
    // "removeComments": true // 删除注释
    // // 常用 7
    // "noEmit": true, //不输出任何文件，命令编译后，不会生成任何文件
    // "noEmitOnError": true, //发生错误后，不输出任何文件
    // // 常用 8
    // "noEmitHelpers": true, // 不生成 helper 函数（工具库函数），需额外安装 ts-helpers
    // "importHelpers": true, // 通过 tsLib 引入 helper 函数（替代额外安装 ts-helpers），文件必须是模块。
    // // 常用 9 
    // "downlevelIteration": true, // 降级遍历器的实现（es3/5），当目标语言是 es3/5 就会对遍历器有一个低级的实现
    // // 常用 10
    // "strict": true, //开启所有严格的类型检查,如果 strict 为 true ，那么常用 10 所有默认选项都是 ture
    // "alwaysStrict": true, // 在代码中注入 "use strict"           
    // "noImplicitAny": true, // 不允许隐式的 any 类型              
    // "strictNullChecks": true, // 不允许把 null、undefined 赋值给其他类型变量       
    // "strictFunctionTypes": true, // 不允许函数参数双向斜变        
    // "strictPropertyInitialization": true, // 类的实例属性必须初始化      
    // "strictBindCallApply": true, // 严格的 bind/call/apply 检查
    // "noImplicitThis": true, // 不允许 this 有隐式的 any 类型 
    // // 常用 11：函数相关选项，只会提出错误，不会影响编译
    // "noUnusedLocals": true, // 检查只声明，未使用的局部变量
    // "noUnusedParameters": true, // 检查未使用的函数参数
    // "noFallthroughCasesInSwitch": true, // 防止 switch 语句贯穿（某一个分支没有 break 语句）
    // "noImplicitReturns": true, // 保证每个分支都要有返回值
    // // 常用 12
    // "esModuleInterop": true, // 允许 export = 导出 的导出方式，由 import from 导入 或 import = 导入
    // "allowUmdGlobalAccess": true, // 允许在模块中以全局变量的方式来访问 UMD 模块
    // "moduleResolution": "node", // 模块的解析策略。Ts 默认使用 node，可以设置成 classic 解析策略
    // "baseUrl": "./", // 解析非相对模块的基地址，默认是 "./"
    // "paths": {
    //   // 导入一个精简版本的 jquery，路径结合 baseUrl 的配置
    //   "jquery": [
    //     "node_modules/jquery/dist/jquery.slim.min.js"
    //   ]
    // }, // 路径映射，相对于 baseUrl
    // "rootDirs": [
    //   "src",
    //   "out"
    // ], // 将多个目录放在一个虚拟目录下，用于运行时。编译器会将他们识别为一个目录下的文件
    // 常用 13
    "listEmittedFiles": true, // 打印输出的文件
    "listFiles": true, // 打印编译的文件（包括引用的声明文件）
  }
}